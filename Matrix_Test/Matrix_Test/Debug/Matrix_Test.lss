
Matrix_Test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000222  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000082  00802000  00000222  00000296  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000318  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000348  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000388  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002204  00000000  00000000  000003a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001be4  00000000  00000000  000025ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000046e  00000000  00000000  00004190  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00004600  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000154a  00000000  00000000  00004624  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000299  00000000  00000000  00005b6e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00005e07  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 56 00 	jmp	0xac	; 0xac <__ctors_end>
   4:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
   8:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
   c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  10:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  14:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  18:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  1c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  20:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  24:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  28:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  2c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  30:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  34:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  38:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  3c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  40:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  44:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  48:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  4c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  50:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  54:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  58:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  5c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  60:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  64:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  68:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  6c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  70:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  74:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  78:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  7c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  80:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  84:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  88:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  8c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  90:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  94:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  98:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  9c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  a0:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  a4:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  a8:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>

000000ac <__ctors_end>:
  ac:	11 24       	eor	r1, r1
  ae:	1f be       	out	0x3f, r1	; 63
  b0:	cf ef       	ldi	r28, 0xFF	; 255
  b2:	cd bf       	out	0x3d, r28	; 61
  b4:	df e2       	ldi	r29, 0x2F	; 47
  b6:	de bf       	out	0x3e, r29	; 62

000000b8 <__do_copy_data>:
  b8:	10 e2       	ldi	r17, 0x20	; 32
  ba:	a0 e0       	ldi	r26, 0x00	; 0
  bc:	b0 e2       	ldi	r27, 0x20	; 32
  be:	e2 e2       	ldi	r30, 0x22	; 34
  c0:	f2 e0       	ldi	r31, 0x02	; 2
  c2:	02 c0       	rjmp	.+4      	; 0xc8 <__do_copy_data+0x10>
  c4:	05 90       	lpm	r0, Z+
  c6:	0d 92       	st	X+, r0
  c8:	a2 38       	cpi	r26, 0x82	; 130
  ca:	b1 07       	cpc	r27, r17
  cc:	d9 f7       	brne	.-10     	; 0xc4 <__do_copy_data+0xc>
  ce:	0e 94 6d 00 	call	0xda	; 0xda <main>
  d2:	0c 94 0f 01 	jmp	0x21e	; 0x21e <_exit>

000000d6 <__bad_interrupt>:
  d6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000da <main>:
	uint8_t yShift;
	uint8_t y;
	uint8_t frame;
	uint16_t frameLarge;
	
	PORTA.DIRSET = PIN0_bm | PIN1_bm | PIN2_bm | PIN3_bm | PIN4_bm | PIN5_bm | PIN6_bm | PIN7_bm;
  da:	8f ef       	ldi	r24, 0xFF	; 255
  dc:	80 93 01 06 	sts	0x0601, r24	; 0x800601 <__TEXT_REGION_LENGTH__+0x7f7601>
	PORTD.DIRSET = PIN0_bm | PIN1_bm | PIN2_bm | PIN3_bm | PIN4_bm | PIN5_bm | PIN6_bm | PIN7_bm;
  e0:	80 93 61 06 	sts	0x0661, r24	; 0x800661 <__TEXT_REGION_LENGTH__+0x7f7661>
	
    /* Replace with your application code */
    while (1) 
    {
		
		for (frameLarge = 0; frameLarge < frameSize * 5; frameLarge++)
  e4:	40 e0       	ldi	r20, 0x00	; 0
  e6:	50 e0       	ldi	r21, 0x00	; 0
  e8:	7c c0       	rjmp	.+248    	; 0x1e2 <main+0x108>
		{
			//_delay_ms(100);
		frame = frameLarge / 5;
  ea:	9a 01       	movw	r18, r20
  ec:	ad ec       	ldi	r26, 0xCD	; 205
  ee:	bc ec       	ldi	r27, 0xCC	; 204
  f0:	0e 94 00 01 	call	0x200	; 0x200 <__umulhisi3>
  f4:	ec 01       	movw	r28, r24
  f6:	d6 95       	lsr	r29
  f8:	c7 95       	ror	r28
  fa:	d6 95       	lsr	r29
  fc:	c7 95       	ror	r28
			for (y = 0; y < DIS_HEIGHT; y++)
  fe:	80 e0       	ldi	r24, 0x00	; 0
 100:	6b c0       	rjmp	.+214    	; 0x1d8 <main+0xfe>
			{
				yShift = ~(0b00000001 << y);
 102:	e8 2f       	mov	r30, r24
 104:	f0 e0       	ldi	r31, 0x00	; 0
 106:	21 e0       	ldi	r18, 0x01	; 1
 108:	30 e0       	ldi	r19, 0x00	; 0
 10a:	08 2e       	mov	r0, r24
 10c:	02 c0       	rjmp	.+4      	; 0x112 <main+0x38>
 10e:	22 0f       	add	r18, r18
 110:	33 1f       	adc	r19, r19
 112:	0a 94       	dec	r0
 114:	e2 f7       	brpl	.-8      	; 0x10e <main+0x34>
 116:	20 95       	com	r18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 118:	36 ea       	ldi	r19, 0xA6	; 166
 11a:	3a 95       	dec	r19
 11c:	f1 f7       	brne	.-4      	; 0x11a <main+0x40>
 11e:	00 c0       	rjmp	.+0      	; 0x120 <main+0x46>
				
				_delay_us(DELAY);
				PORTD.OUT = yShift;
 120:	a0 e6       	ldi	r26, 0x60	; 96
 122:	b6 e0       	ldi	r27, 0x06	; 6
 124:	14 96       	adiw	r26, 0x04	; 4
 126:	2c 93       	st	X, r18
 128:	14 97       	sbiw	r26, 0x04	; 4
				PORTA.OUT = 0b00000001 & _frames3[frame][y];
 12a:	be 01       	movw	r22, r28
 12c:	77 27       	eor	r23, r23
 12e:	66 0f       	add	r22, r22
 130:	77 1f       	adc	r23, r23
 132:	66 0f       	add	r22, r22
 134:	77 1f       	adc	r23, r23
 136:	66 0f       	add	r22, r22
 138:	77 1f       	adc	r23, r23
 13a:	6f 5f       	subi	r22, 0xFF	; 255
 13c:	7f 4d       	sbci	r23, 0xDF	; 223
 13e:	e6 0f       	add	r30, r22
 140:	f7 1f       	adc	r31, r23
 142:	90 81       	ld	r25, Z
 144:	39 2f       	mov	r19, r25
 146:	31 70       	andi	r19, 0x01	; 1
 148:	e0 e0       	ldi	r30, 0x00	; 0
 14a:	f6 e0       	ldi	r31, 0x06	; 6
 14c:	34 83       	std	Z+4, r19	; 0x04
 14e:	36 ea       	ldi	r19, 0xA6	; 166
 150:	3a 95       	dec	r19
 152:	f1 f7       	brne	.-4      	; 0x150 <main+0x76>
 154:	00 c0       	rjmp	.+0      	; 0x156 <main+0x7c>
				_delay_us(DELAY);
				PORTD.OUT = yShift;
 156:	14 96       	adiw	r26, 0x04	; 4
 158:	2c 93       	st	X, r18
 15a:	14 97       	sbiw	r26, 0x04	; 4
				PORTA.OUT = 0b00000010 & _frames3[frame][y];
 15c:	39 2f       	mov	r19, r25
 15e:	32 70       	andi	r19, 0x02	; 2
 160:	34 83       	std	Z+4, r19	; 0x04
 162:	36 ea       	ldi	r19, 0xA6	; 166
 164:	3a 95       	dec	r19
 166:	f1 f7       	brne	.-4      	; 0x164 <main+0x8a>
 168:	00 c0       	rjmp	.+0      	; 0x16a <main+0x90>
				_delay_us(DELAY);
				PORTD.OUT = yShift;
 16a:	14 96       	adiw	r26, 0x04	; 4
 16c:	2c 93       	st	X, r18
 16e:	14 97       	sbiw	r26, 0x04	; 4
				PORTA.OUT = 0b00000100 & _frames3[frame][y];
 170:	39 2f       	mov	r19, r25
 172:	34 70       	andi	r19, 0x04	; 4
 174:	34 83       	std	Z+4, r19	; 0x04
 176:	36 ea       	ldi	r19, 0xA6	; 166
 178:	3a 95       	dec	r19
 17a:	f1 f7       	brne	.-4      	; 0x178 <main+0x9e>
 17c:	00 c0       	rjmp	.+0      	; 0x17e <main+0xa4>
				_delay_us(DELAY);
				PORTD.OUT = yShift;
 17e:	14 96       	adiw	r26, 0x04	; 4
 180:	2c 93       	st	X, r18
 182:	14 97       	sbiw	r26, 0x04	; 4
				PORTA.OUT = 0b00001000 & _frames3[frame][y];
 184:	39 2f       	mov	r19, r25
 186:	38 70       	andi	r19, 0x08	; 8
 188:	34 83       	std	Z+4, r19	; 0x04
 18a:	36 ea       	ldi	r19, 0xA6	; 166
 18c:	3a 95       	dec	r19
 18e:	f1 f7       	brne	.-4      	; 0x18c <main+0xb2>
 190:	00 c0       	rjmp	.+0      	; 0x192 <main+0xb8>
				_delay_us(DELAY);
				PORTD.OUT = yShift;
 192:	14 96       	adiw	r26, 0x04	; 4
 194:	2c 93       	st	X, r18
 196:	14 97       	sbiw	r26, 0x04	; 4
				PORTA.OUT = 0b00010000 & _frames3[frame][y];
 198:	39 2f       	mov	r19, r25
 19a:	30 71       	andi	r19, 0x10	; 16
 19c:	34 83       	std	Z+4, r19	; 0x04
 19e:	36 ea       	ldi	r19, 0xA6	; 166
 1a0:	3a 95       	dec	r19
 1a2:	f1 f7       	brne	.-4      	; 0x1a0 <main+0xc6>
 1a4:	00 c0       	rjmp	.+0      	; 0x1a6 <main+0xcc>
				_delay_us(DELAY);
				PORTD.OUT = yShift;
 1a6:	14 96       	adiw	r26, 0x04	; 4
 1a8:	2c 93       	st	X, r18
 1aa:	14 97       	sbiw	r26, 0x04	; 4
				PORTA.OUT = 0b00100000 & _frames3[frame][y];
 1ac:	39 2f       	mov	r19, r25
 1ae:	30 72       	andi	r19, 0x20	; 32
 1b0:	34 83       	std	Z+4, r19	; 0x04
 1b2:	36 ea       	ldi	r19, 0xA6	; 166
 1b4:	3a 95       	dec	r19
 1b6:	f1 f7       	brne	.-4      	; 0x1b4 <main+0xda>
 1b8:	00 c0       	rjmp	.+0      	; 0x1ba <main+0xe0>
				_delay_us(DELAY);
				PORTD.OUT = yShift;
 1ba:	14 96       	adiw	r26, 0x04	; 4
 1bc:	2c 93       	st	X, r18
 1be:	14 97       	sbiw	r26, 0x04	; 4
				PORTA.OUT = 0b01000000 & _frames3[frame][y];
 1c0:	39 2f       	mov	r19, r25
 1c2:	30 74       	andi	r19, 0x40	; 64
 1c4:	34 83       	std	Z+4, r19	; 0x04
 1c6:	36 ea       	ldi	r19, 0xA6	; 166
 1c8:	3a 95       	dec	r19
 1ca:	f1 f7       	brne	.-4      	; 0x1c8 <main+0xee>
 1cc:	00 c0       	rjmp	.+0      	; 0x1ce <main+0xf4>
				_delay_us(DELAY);
				PORTD.OUT = yShift;
 1ce:	14 96       	adiw	r26, 0x04	; 4
 1d0:	2c 93       	st	X, r18
				PORTA.OUT = 0b10000000 & _frames3[frame][y];
 1d2:	90 78       	andi	r25, 0x80	; 128
 1d4:	94 83       	std	Z+4, r25	; 0x04
		
		for (frameLarge = 0; frameLarge < frameSize * 5; frameLarge++)
		{
			//_delay_ms(100);
		frame = frameLarge / 5;
			for (y = 0; y < DIS_HEIGHT; y++)
 1d6:	8f 5f       	subi	r24, 0xFF	; 255
 1d8:	88 30       	cpi	r24, 0x08	; 8
 1da:	08 f4       	brcc	.+2      	; 0x1de <main+0x104>
 1dc:	92 cf       	rjmp	.-220    	; 0x102 <main+0x28>
	
    /* Replace with your application code */
    while (1) 
    {
		
		for (frameLarge = 0; frameLarge < frameSize * 5; frameLarge++)
 1de:	4f 5f       	subi	r20, 0xFF	; 255
 1e0:	5f 4f       	sbci	r21, 0xFF	; 255
 1e2:	80 91 00 20 	lds	r24, 0x2000	; 0x802000 <__DATA_REGION_ORIGIN__>
 1e6:	90 e0       	ldi	r25, 0x00	; 0
 1e8:	9c 01       	movw	r18, r24
 1ea:	22 0f       	add	r18, r18
 1ec:	33 1f       	adc	r19, r19
 1ee:	22 0f       	add	r18, r18
 1f0:	33 1f       	adc	r19, r19
 1f2:	82 0f       	add	r24, r18
 1f4:	93 1f       	adc	r25, r19
 1f6:	48 17       	cp	r20, r24
 1f8:	59 07       	cpc	r21, r25
 1fa:	08 f4       	brcc	.+2      	; 0x1fe <main+0x124>
 1fc:	76 cf       	rjmp	.-276    	; 0xea <main+0x10>
 1fe:	72 cf       	rjmp	.-284    	; 0xe4 <main+0xa>

00000200 <__umulhisi3>:
 200:	a2 9f       	mul	r26, r18
 202:	b0 01       	movw	r22, r0
 204:	b3 9f       	mul	r27, r19
 206:	c0 01       	movw	r24, r0
 208:	a3 9f       	mul	r26, r19
 20a:	70 0d       	add	r23, r0
 20c:	81 1d       	adc	r24, r1
 20e:	11 24       	eor	r1, r1
 210:	91 1d       	adc	r25, r1
 212:	b2 9f       	mul	r27, r18
 214:	70 0d       	add	r23, r0
 216:	81 1d       	adc	r24, r1
 218:	11 24       	eor	r1, r1
 21a:	91 1d       	adc	r25, r1
 21c:	08 95       	ret

0000021e <_exit>:
 21e:	f8 94       	cli

00000220 <__stop_program>:
 220:	ff cf       	rjmp	.-2      	; 0x220 <__stop_program>
